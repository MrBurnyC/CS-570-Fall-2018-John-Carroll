Return-Path: <cssc0018@edoras.sdsu.edu>
X-Original-To: cssc0018
Delivered-To: cssc0018@edoras.sdsu.edu
Received: by edoras.sdsu.edu (Postfix, from userid 1129)
	id B2ABE6000048; Fri, 14 Sep 2018 23:00:13 -0700 (PDT)
Date: Fri, 14 Sep 2018 23:00:13 -0700
To: cssc0018@edoras.sdsu.edu
Subject: CS570 Program 1 results
User-Agent: Heirloom mailx 12.5 7/5/10
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
Message-Id: <20180915060013.B2ABE6000048@edoras.sdsu.edu>
From: cssc0018@edoras.sdsu.edu (Bernardo Cervantes)

This is a **preliminary** test of your upcoming Program 1.
Due dates for our programs can be found in the ~cs570/calendar file on edoras.

This message, which will appear to be mailed from your account, is intended to
show you some (but not necessarily all) of the checks that will be made on your
assignment when the due date actually arrives.  This is NOT the actual version
that will be graded, but only an attempt to give you early warning of any
potential problems.  Point totals in the final graded version may differ.

[Standard Disclaimer:]
These practice tests are intended to show bugs, but also to reveal places
where you may not be following all the automatic grader's nitpicking
requirements.  If you receive failure warnings on the preliminary tests
and then also have difficulty during the graded event, you have very little
recourse.  To take full advantage of the feedback provided in this course,
you must do the assignments in a timely fashion.
jc

Login     Name                 Tty      Idle  Login Time   Office     Office Phone   Host
cssc0018  Bernardo Cervantes   pts/49      *  Sep 13 08:53 6196001753                (10.130.154.60)

Checking Program 1:
total 52
-rw------- 1 cssc0018    74 Sep  6 12:37 2ndfile
-rw------- 1 cssc0018 12288 Sep  6 12:47 9-6-18
drwx------ 5 cssc0018    52 Aug 30 23:26 Maildir/
drwx------ 2 cssc0018  4096 Sep 14 00:51 One/
-rw------- 1 cssc0018  1733 Aug 31 18:01 README
drwx------ 2 cssc0018    46 Sep 11 16:33 Sandbox/
drwxr-xr-x 2 cssc0018  4096 Sep  5 20:02 Zero/
lrwxrwxrwx 1 cssc0018    31 Aug 30 10:16 calendar -> /home/cs/faculty/cs570/calendar
-rwxr-xr-x 1 cssc0018  9648 Aug 31 08:26 errors*
lrwxrwxrwx 1 cssc0018    31 Aug 31 08:05 errors.c -> /home/cs/faculty/cs570/errors.c
-rw------- 1 cssc0018     3 Sep  6 13:00 hifile
-rw------- 1 cssc0018    83 Sep  6 12:32 newfile
-rw------- 1 cssc0018    95 Sep  6 12:39 nf
-rw------- 1 cssc0018     0 Sep  6 12:40 sorted
Test 0... checking for the proper directory:
total 40
lrwxrwxrwx 1 cssc0018    29 Sep 10 22:11 Data1 -> /home/cs/faculty/cs570/Data1//
-rw-r--r-- 1 cssc0018  5645 Sep 13 08:58 getword.c
lrwxrwxrwx 1 cssc0018    36 Sep  4 08:51 getword.h -> /home/cs/faculty/cs570/One/getword.h
-rw------- 1 cssc0018  7160 Sep 14 00:51 getword.o
-rw------- 1 cssc0018   563 Sep 13 08:59 gradernotes
-rw------- 1 cssc0018    92 Sep 13 08:53 input3
lrwxrwxrwx 1 cssc0018    35 Sep  4 08:52 makefile -> /home/cs/faculty/cs570/One/makefile
-rwx------ 1 cssc0018 11680 Sep 14 00:51 p1*
lrwxrwxrwx 1 cssc0018    31 Sep  4 08:51 p1.c -> /home/cs/faculty/cs570/One/p1.c
-rw------- 1 cssc0018  3416 Sep 14 00:51 p1.o
Test 1... testing will proceed only if you have created the proper file:
ls -lo ~/One/getword.c
-rw-r--r-- 1 cssc0018 5645 Sep 13 08:58 /home/cs/carroll/cssc0018/One/getword.c

1    /*getword.c  - is a lexical analyzer that meets the requirements
2     *	       of Program 0.
3     *
4     * Class Info- Bernardo Cervantes , John Carroll, CS570 ,
5     *	       Due: 9/17/18 @ 8PM
6     *		 
7     * Synopsis  - Takes input from the keyboard (stdin) or from
8     * 	       Data0/input# and writes to the Storage array 
9     *	       and returns a int back to p0.
10    *
11    * Objective - Returns the correct input back to p0 so that 
12    *             p0 will print out the correct int and string
13    *	       that is identical to the same output in the 
14    *	       p0 prompt and the what autograder produces.
15    *             
16    */
17   
18   /* Include Files */
19   #include <stdio.h>
20   #include <stdlib.h>
21   #include "getword.h"
22   
23   
24   int getword(char *w){
25   	int wordCount = 0; //Must initalize to zero or else you get garbage.
26   	int iochar = 0;
27   	int true = 0;      //bool for checking '$'
28   	const char *name = "HOME";
29    	char *value = getenv(name); //Sets home directory to value ; 
30   	char *x = value;	//Points to beginning string of value.
31    	
32   	/* Stores intital char */
33   
34   	iochar = getchar(); 
35   
36   	/* Skipping leading spaces. */
37   
38   	while(iochar == ' '){
39   		iochar = getchar();	
40   	}
41   
42   	/* Check if EOF signal is in the beginning
43   	 * and puts null char in array (storage) to print
44   	 * an empty string. 
45   	 * Returns -255
46   	 */
47   
48   	if(iochar == EOF){
49   		*w = '\0';    
50   		return -255;
51   	}
52   
53   	/* Checks if newline is in the beginning of the input.
54   	 * Puts null char in array to print empty string.
55   	 * Returns 0
56   	 */
57   
58   	if(iochar == '\n'){
59   		*w = '\0';
60   		return 0;
61   	}
62   
63   	/*
64   	 * Checks if ";" is first char  
65   	 * in input. Puts null char in array to print
66   	 * null empty string.
67   	 * Return 0 
68   	 */ 
69   
70   	if(iochar == ';'){
71   		*w = '\0';
72   		return 0;
73   	}
74   
75   
76   	/*
77   	 * Checks if "$" is first char  
78   	 * in input. Puts null char in array to print
79   	 * null empty string. Gets next char and checks 
80   	 * if it is EOF. Sets boolean true to 1 or true.
81   	 * Return 0 
82   	 */ 
83   
84   	if(iochar == '$'){
85   		true = 1;
86   		iochar = getchar();
87   		if(iochar == EOF){
88   			*w = '\0';
89   			return 0;
90   		}
91   	} 
92   	
93   	/* Checks if the first char is ~. If it is then it 
94   	*  writes to the STORAGE array with w* with the value:
95   	*  home path directory which is dynamically generated with getenv().
96   	*  *x points to the char array that contains the home directory 
97   	*  and is used to write to w* which points to STORAGE array.
98   	*/
99   
100  	if(iochar == '~' && true == 0){
101  		iochar = getchar();
102  		/*	
103  		if(iochar == EOF  || iochar == '\n'){
104  			*w++ = '~';
105  			*w = '\0';	
106  			ungetc(iochar , stdin);
107  			return -1;	
108  			//true = 1;		
109  		}
110  		*/
111  
112  		//else{
113  
114  			while(*x != '\0'){
115  				*w = *x;
116  				w++;
117  				x++;
118  				wordCount++;
119  		//	}
120  		}	
121  	}
122  
123  /*
124   *Checking for meta characters.
125   */	
126  	if(iochar == '<' || iochar == '>' || iochar == '|' || iochar == '&'){
127  
128  		
129  		if(iochar == '<'){
130  			*w = iochar;
131  			w++;	
132  			wordCount++;
133  			iochar = getchar();	
134  			
135  			if(iochar == '<'){
136  			      *w = iochar;      		
137                                 w++;
138  			       wordCount++;
139                                 *w = '\0';
140  			       return wordCount;
141  			}
142  			else{
143  				iochar = ungetc(iochar , stdin);
144  				*w = '\0';
145  				return wordCount;
146  			}		
147  			
148  			
149  			
150  		}
151  		
152  		*w = iochar;
153  		w++;
154  		wordCount++;
155  		*w = '\0';
156  		return wordCount;
157  			
158  
159  
160  	}
161  	
162  	
163  	
164  
165  	/*
166  	 * Infinite for loop is used to get any remaining.  
167  	 * characters with exception chars accounted for such as
168  	 * EOF spaces, newlines and semicolons which are the same
169  	 * as the first checks but this time we return wordCount since
170  	 * these characters are not the first char in the words anymore.
171           * when the word is processed the storage array has been written
172  	 * with the word or an empty string based on some execptions
173  	 * and the wordcount is returned which stops the for loop.    
174  	 */ 
175  
176  	for(;;){
177  
178  
179  
180  
181  
182  	
183  
184  		
185   		/* Checks to see if wordCount is greater than Storage (255).
186  		 * If so then it terminates the string and returns its
187  		 * current word count.
188   		*/
189  
190  		if(wordCount == STORAGE - 1){
191  			iochar = ungetc(iochar, stdin);
192  			*w = '\0';
193  			return wordCount; 
194  		}
195  		
196  
197  		/* Checks for EOF. If wordCount is anything but zero. It returns
198  		 * th word count. If not it returns -255. 
199  		 */
200  	
201  		if(iochar == EOF){
202  				if(wordCount < 0 || wordCount > 0){
203  					iochar = ungetc(iochar,stdin);
204  					*w = '\0';
205  					return wordCount;
206  				}
207  
208  				return -255; 
209  			}
210  
211  			/* Checks for space. If found, write null char to 
212  			 * array and 
213  			 * return wordCount.
214  			 */
215  
216  			if(iochar == ' '){
217  				*w = '\0';
218  				return wordCount;
219  			}
220  
221  
222  			/* Checks for newline or semicolon. 
223  			 * If found, write null char to 
224  			 * array and 
225  			 * return wordCount.
226  			 */
227  
228  			if(iochar == '\n'|| iochar == ';'){
229  				iochar = ungetc(iochar,stdin);
230  				*w = '\0';
231  				return wordCount;
232  			}
233  	
234  	
235  			
236  	if(iochar == '<' || iochar == '>' || iochar == '|' || iochar == '&'){
237  
238  		ungetc(iochar, stdin);
239  		*w = '\0';
240  		return wordCount;
241  	}
242  
243  		/*
244  		 *Checks for backslahes in input. Have to put two 
245  		* two backslashes because C has one backslashs as a 
246  		* special keyword.
247  		*/
248  
249  		if(iochar  == '\\'){ 
250  			iochar = getchar();
251  
252  			//if(iochar == '\n' || iochar == EOF){
253  			if(iochar == '\n'){
254  				//ungetc(iochar ,stdin);
255  				//iochar = getchar();
256  				*w = '\0';
257  				iochar = ' ';
258  				w++;
259  				return wordCount;
260  
261  			}
262  
263  		}
264  
265  		
266  
267  
268  
269  		/* Writes Current Iochar To Array.
270  		 * Increments pointer to next array index. 
271  		 */
272  
273  		*w = iochar;
274  		w++;
275  
276  		/* Check if $ was at the beginning of a word.
277  		 * If true then wordCount is decremented 
278  		 *  and is negative. If not then the wordCount 
279  		 *  is incremented and is postive. 
280  		 */
281  
282  		if(true == 1){
283  			wordCount--;
284  		}
285  
286  		else{
287  			wordCount++;
288  		}
289  		/*Gets next char and repeats loop. */
290  
291  		iochar = getchar();
292  
293  
294  	}
295  
296  }

Test 2... is getword.c documented?
(Your getword.c documentation does NOT have to repeat the specs in getword.h,
but it should contain your name, instructor name [NOTE: 'Carroll' contains two
'R's and two 'L's], class (that is, 'CS570'), due date, etc.)
One point was possible here; your total is now 1/1

Test 3... how is the syntax?
splint -warnposix +trytorecover -weak getword.c
Splint 3.1.2 --- 11 Oct 2015

Finished checking --- no warnings

NOTE: not everything that 'splint' comments about is necessarily a bad thing;
for example, splint may complain if you don't save the value that ungetc()
returns (even if this may be a perfectly reasonable thing to ignore).

Test 4... Does the gradernotes file exist?
Yes.
Your gradernotes file contains:
1:"I wrote this code myself but I used example inout2.c from C
2:by Discovery by Foster. I also read the first couple of 
3:chapters of this book to learn the C language. As errors 
4:occured I often googled syntax and used websites like
5:stackoverflow.com and various other that lead me to 
6:fix my code."
7:I also emailed Dr. Caroll for help and hints on this program and 
8:he has given me very good help that has lead me to finish it. 
9:
10:As of right now my code is finished, has no known bugs and 
11:does produce the correct output which has been verified
12:by the autograder. 

A human will have to read and evaluate the contents of gradernotes.
Double-check that you have BOTH required statements in gradernotes! 

Test 5: checking the soft links...
Is the getword.h soft link in place?
ls -l ~cssc0018/One/getword.h
lrwxrwxrwx 1 cssc0018 carroll 36 Sep  4 08:51 /home/cs/carroll/cssc0018/One/getword.h -> /home/cs/faculty/cs570/One/getword.h
Yes.
Is the makefile soft link in place?
ls -l ~cssc0018/One/makefile
lrwxrwxrwx 1 cssc0018 carroll 35 Sep  4 08:52 /home/cs/carroll/cssc0018/One/makefile -> /home/cs/faculty/cs570/One/makefile
Yes.
Is the p1.c soft link in place?
ls -l ~cssc0018/One/p1.c
lrwxrwxrwx 1 cssc0018 carroll 31 Sep  4 08:51 /home/cs/carroll/cssc0018/One/p1.c -> /home/cs/faculty/cs570/One/p1.c
Yes.
Unless ALL these are right, you could LOSE a point here; your total is now 1/1

Test 6... does your program compile?
make clean; make
rm -f *.o p1
gcc -g   -c -o getword.o getword.c
gcc -g   -c -o p1.o p1.c
gcc -o p1 getword.o p1.o
[1] 17167

Test 7... are all the program0 specs still met?
Here is the result of ~cssc0018/One/p1 < ~cs570/Data1/input1 :

Your output was:
n=10, s=[no-brainer]
n=3, s=[one]
n=0, s=[]
n=0, s=[]
n=8, s=[trickier]
n=0, s=[]
n=3, s=[t$o]
n=-6, s=[master]
n=0, s=[]
n=-10, s=[$Different]
n=-5, s=[Words]
n=0, s=[]
n=0, s=[]
n=0, s=[]
n=0, s=[]
n=-6, s=[expect]
n=49, s=[10,3,0,0,8,0,3,-6,0,-10,-5,0,0,0,0,-6,49,0,0,-255]
n=0, s=[]
n=0, s=[]
n=-255, s=[]

A diff of the correct output with your output shows:
                              No differences encountered -- CONGRATULATIONS

Three more points were possible here; your total is now 4/4

Test 8... does your program recognize metacharacters?
Here is the result of ~cssc0018/One/p1 < ~cs570/Data1/input2 :

Your output was:
n=5, s=[AB~CD]
n=18, s=[/usr/local/binABCD]
n=-5, s=[SHELL]
n=-1, s=[~]
n=0, s=[]
n=-255, s=[]

A diff of the correct output with your output shows:
                              No differences encountered -- CONGRATULATIONS
   (NOTE: Since I randomly set the HOME variable, you should not expect
   to see ~cssc0018 in the output.)
Three more points were possible here; your total is now 7/7

Test 9... how does your program react to backslash-metacharacters?
Here is the result of ~cssc0018/One/p1 < ~cs570/Data1/input3 :

Your output was:
n=12, s=[one>stillone]
n=1, s=[<]
n=1, s=[<]
n=5, s=[$abcd]
n=2, s=[<<]
n=5, s=[~foo\]
n=0, s=[]
n=-255, s=[]

A diff of the correct output with your output shows:
                              No differences encountered -- CONGRATULATIONS

Two more points were possible here; your total is now 9/9

Test 10... does your program handle buffer overruns correctly?
Here is the result of ~cssc0018/One/p1 < ~cs570/Data1/input4 :

Your output was:
n=6, s=[123$56]
n=25, s=[/home/cs/carroll/cssc0018]
n=-255, s=[]

The correct output is:
n=6, s=[123$56]
n=25, s=[/home/cs/carroll/cssc0018]
n=-255, s=[]

 Tilde was expanded correctly, dollar sign left verbatim -- CONGRATULATIONS

Three more points were possible here; your total is now 12/12

Test 11... does your program handle buffer overruns correctly?
Here is the result of ~cssc0018/One/p1 < ~cs570/Data1/input5 :

Your output was:
n=5, s=[word1]
n=1, s=[|]
n=254, 
s=[123456789a123456789b123456789c123456789d123456789e123456789f123456789g1234567
89h123456789i123456789j123456789k123456789l123456789m123456789n123456789o1234567
89p123456789q123456789r123456789s123456789t123456789u123456789v123456789w1234567
89x123456789y1234]
n=254, 
s=[56789z123456789A123456789B123456789C123456789D123456789E123456789F123456789G1
23456789H123456789I123456789J123456789K123456789L123456789M123456789N123456789O1
23456789P123456789Q123456789R123456789S123456789T123456789U123456789V123456789W1
23456789X12345678]
n=12, s=[9Y123456789Z]
n=0, s=[]
n=-255, s=[]

A diff of the correct output with your output shows:
                              No differences encountered -- CONGRATULATIONS

Three more points were possible here; your total is now 15/15

Your grade for this assignment may be adjusted by a (human) grader at the
due date.  Your grade could be as much as two points lower, depending on what
you have put in gradernotes, and the quality of your getword.c documentation.

             ------
Total Points | 15 |  for cssc0018 - Bernardo Cervantes,,,6196001753 for Program 1
             |----|
             | 15 |
             ------
