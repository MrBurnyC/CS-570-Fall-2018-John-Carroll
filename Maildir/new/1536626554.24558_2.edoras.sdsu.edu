Return-Path: <cssc0018@edoras.sdsu.edu>
X-Original-To: cssc0018
Delivered-To: cssc0018@edoras.sdsu.edu
Received: by edoras.sdsu.edu (Postfix, from userid 1129)
	id E82D46000048; Mon, 10 Sep 2018 17:42:34 -0700 (PDT)
Date: Mon, 10 Sep 2018 17:42:34 -0700
To: cssc0018@edoras.sdsu.edu
Subject: CS570 Program 1 results
User-Agent: Heirloom mailx 12.5 7/5/10
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
Message-Id: <20180911004234.E82D46000048@edoras.sdsu.edu>
From: cssc0018@edoras.sdsu.edu (Bernardo Cervantes)

This is a **preliminary** test of your upcoming Program 1.
Due dates for our programs can be found in the ~cs570/calendar file on edoras.

This message, which will appear to be mailed from your account, is intended to
show you some (but not necessarily all) of the checks that will be made on your
assignment when the due date actually arrives.  This is NOT the actual version
that will be graded, but only an attempt to give you early warning of any
potential problems.  Point totals in the final graded version may differ.

[Standard Disclaimer:]
These practice tests are intended to show bugs, but also to reveal places
where you may not be following all the automatic grader's nitpicking
requirements.  If you receive failure warnings on the preliminary tests
and then also have difficulty during the graded event, you have very little
recourse.  To take full advantage of the feedback provided in this course,
you must do the assignments in a timely fashion.
jc

Login     Name                 Tty      Idle  Login Time   Office     Office Phone   Host
cssc0018  Bernardo Cervantes   pts/9       *  Sep  8 15:58 6196001753                (169.228.205.149)

Checking Program 1:
total 48
-rw------- 1 cssc0018    74 Sep  6 12:37 2ndfile
-rw------- 1 cssc0018 12288 Sep  6 12:47 9-6-18
drwx------ 5 cssc0018    52 Aug 30 23:26 Maildir/
drwx------ 2 cssc0018   100 Sep  9 20:19 One/
-rw------- 1 cssc0018  1733 Aug 31 18:01 README
drwx------ 2 cssc0018    34 Sep  2 10:05 Sandbox/
drwxr-xr-x 2 cssc0018  4096 Sep  5 20:02 Zero/
lrwxrwxrwx 1 cssc0018    31 Aug 30 10:16 calendar -> /home/cs/faculty/cs570/calendar
-rwxr-xr-x 1 cssc0018  9648 Aug 31 08:26 errors*
lrwxrwxrwx 1 cssc0018    31 Aug 31 08:05 errors.c -> /home/cs/faculty/cs570/errors.c
-rw------- 1 cssc0018     3 Sep  6 13:00 hifile
-rw------- 1 cssc0018    83 Sep  6 12:32 newfile
-rw------- 1 cssc0018    95 Sep  6 12:39 nf
-rw------- 1 cssc0018     0 Sep  6 12:40 sorted
Test 0... checking for the proper directory:
total 28
-rw-r--r-- 1 cssc0018  3434 Sep  4 08:36 getword.c
lrwxrwxrwx 1 cssc0018    36 Sep  4 08:51 getword.h -> /home/cs/faculty/cs570/One/getword.h
-rw------- 1 cssc0018  6008 Sep  9 20:19 getword.o
lrwxrwxrwx 1 cssc0018    35 Sep  4 08:52 makefile -> /home/cs/faculty/cs570/One/makefile
-rwx------ 1 cssc0018 11432 Sep  9 20:19 p1*
lrwxrwxrwx 1 cssc0018    31 Sep  4 08:51 p1.c -> /home/cs/faculty/cs570/One/p1.c
-rw------- 1 cssc0018  3416 Sep  9 20:19 p1.o
Test 1... testing will proceed only if you have created the proper file:
ls -lo ~/One/getword.c
-rw-r--r-- 1 cssc0018 3434 Sep  4 08:36 /home/cs/carroll/cssc0018/One/getword.c

1    /*getword.c  - is a lexical analyzer that meets the requirements
2     *	       of Program 0.
3     *
4     * Class Info- Bernardo Cervantes , John Carroll, CS570 ,
5     *	       Due: 9/5/18 @ 8PM
6     *		 
7     * Synopsis  - Takes input from the keyboard (stdin) or from
8     * 	       Data0/input# and writes to the Storage array 
9     *	       and returns a int back to p0.
10    *
11    * Objective - Returns the correct input back to p0 so that 
12    *             p0 will print out the correct int and string
13    *	       that is identical to the same output in the 
14    *	       p0 prompt and the what autograder produces.
15    *             
16    */
17   
18   /* Include Files */
19   #include <stdio.h>
20   #include "getword.h"
21   
22   
23   int getword(char *w){
24   	int wordCount = 0; //Must initalize to zero or else you get garbage.
25   	int iochar = 0;
26   	int true = 0;      //bool for checking '$'
27   
28   	/* Stores intital char */
29   
30   	iochar = getchar(); 
31   
32   	/* Skipping leading spaces. */
33   
34   	while(iochar == ' '){
35   		iochar = getchar();	
36   	}
37   
38   	/* Check if EOF signal is in the beginning
39   	 * and puts null char in array (storage) to print
40   	 * an empty string. 
41   	 * Returns -255
42   	 */
43   
44   	if(iochar == EOF){
45   		*w = '\0';    
46   		return -255;
47   	}
48   
49   	/* Checks if newline is in the beginning of the input.
50   	 * Puts null char in array to print empty string.
51   	 * Returns 0
52   	 */
53   
54   	if(iochar == '\n'){
55   		*w = '\0';
56   		return 0;
57   	}
58   
59   	/*
60   	 * Checks if ";" is first char  
61   	 * in input. Puts null char in array to print
62   	 * null empty string.
63   	 * Return 0 
64   	 */ 
65   
66   	if(iochar == ';'){
67   		*w = '\0';
68   		return 0;
69   	}
70   
71   
72   	/*
73   	 * Checks if "$" is first char  
74   	 * in input. Puts null char in array to print
75   	 * null empty string. Gets next char and checks 
76   	 * if it is EOF. Sets boolean true to 1 or true.
77   	 * Return 0 
78   	 */ 
79   
80   	if(iochar == '$'){
81   		true = 1;
82   		iochar = getchar();
83   		if(iochar == EOF){
84   			return 0;
85   		}
86   	}
87   
88   	/*
89   	 * Infinite for loop is used to get any remaining.  
90   	 * characters with exception chars accounted for such as
91   	 * EOF spaces, newlines and semicolons which are the same
92   	 * as the first checks but this time we return wordCount since
93   	 * these characters are not the first char in the words anymore.
94            * when the word is processed the storage array has been written
95   	 * with the word or an empty string based on some execptions
96   	 * and the wordcount is returned which stops the for loop.    
97   	 */ 
98   
99   	for(;;){
100  
101  		/* Checks for EOF. If wordCount is anything but zero. It returns
102  		 * the word count. If not it returns -255. 
103  		 */
104  	
105  		if(iochar == EOF){
106  			if(wordCount < 0 || wordCount > 0){
107  				iochar = ungetc(iochar,stdin);
108  				*w = '\0';
109  				return wordCount;
110  			}
111  
112  			return -255; 
113  		}
114  
115  		/* Checks for space. If found, write null char to 
116  		 * array and 
117  		 * return wordCount.
118  		 */
119  
120  		if(iochar == ' '){
121  			*w = '\0';
122  			return wordCount;
123  		}
124  
125  
126  		/* Checks for newline or semicolon. 
127  		 * If found, write null char to 
128  		 * array and 
129  		 * return wordCount.
130  		 */
131  
132  		if(iochar == '\n'|| iochar == ';'){
133  			iochar = ungetc(iochar,stdin);
134  			*w = '\0';
135  			return wordCount;
136  		}
137  
138  
139  		/* Writes current iochar to array.
140  		 * Increments pointer to next array index. 
141  		 */
142  
143  		*w = iochar;
144  		w++;
145  
146  		/* Check if $ was at the beginning of a word.
147  		 * If true then wordCount is decremented 
148  		 *  and is negative. If not then the wordCount 
149  		 *  is incremented and is postive. 
150  		 */
151  
152  		if(true == 1){
153  			wordCount--;
154  		}
155  
156  		else{
157  			wordCount++;
158  		}
159  		/*Gets next char and repeats loop. */
160  
161  		iochar = getchar();
162  
163  
164  	}
165  
166  }

Test 2... is getword.c documented?
(Your getword.c documentation does NOT have to repeat the specs in getword.h,
but it should contain your name, instructor name [NOTE: 'Carroll' contains two
'R's and two 'L's], class (that is, 'CS570'), due date, etc.)
One point was possible here; your total is now 1/1

Test 3... how is the syntax?
splint -warnposix +trytorecover -weak getword.c
Splint 3.1.2 --- 11 Oct 2015

Finished checking --- no warnings

NOTE: not everything that 'splint' comments about is necessarily a bad thing;
for example, splint may complain if you don't save the value that ungetc()
returns (even if this may be a perfectly reasonable thing to ignore).

Test 4... Does the gradernotes file exist?
ls -lF gradernotes
/bin/ls: cannot access /home/cs/carroll/cssc0018/One/gradernotes: No such file or directory

                                              ERROR    ERROR    ERROR    ERROR
You should put your gradernotes file under the One directory.
Refer to the assignment for details on what gradernotes should contain.
If you do this at the last minute, you risk misnaming it, and getting no credit.
You LOSE a point here; your total is now 0/1

A human will have to read and evaluate the contents of gradernotes.
Double-check that you have BOTH required statements in gradernotes! 

Test 5: checking the soft links...
Is the getword.h soft link in place?
ls -l ~cssc0018/One/getword.h
lrwxrwxrwx 1 cssc0018 carroll 36 Sep  4 08:51 /home/cs/carroll/cssc0018/One/getword.h -> /home/cs/faculty/cs570/One/getword.h
Yes.
Is the makefile soft link in place?
ls -l ~cssc0018/One/makefile
lrwxrwxrwx 1 cssc0018 carroll 35 Sep  4 08:52 /home/cs/carroll/cssc0018/One/makefile -> /home/cs/faculty/cs570/One/makefile
Yes.
Is the p1.c soft link in place?
ls -l ~cssc0018/One/p1.c
lrwxrwxrwx 1 cssc0018 carroll 31 Sep  4 08:51 /home/cs/carroll/cssc0018/One/p1.c -> /home/cs/faculty/cs570/One/p1.c
Yes.
Unless ALL these are right, you could LOSE a point here; your total is now 0/1

Test 6... does your program compile?
make clean; make
rm -f *.o p1
gcc -g   -c -o getword.o getword.c
gcc -g   -c -o p1.o p1.c
gcc -o p1 getword.o p1.o
[1] 24485

Test 7... are all the program0 specs still met?
Here is the result of ~cssc0018/One/p1 < ~cs570/Data1/input1 :

Your output was:
n=10, s=[no-brainer]
n=3, s=[one]
n=0, s=[]
n=0, s=[]
n=8, s=[trickier]
n=0, s=[]
n=3, s=[t$o]
n=-6, s=[master]
n=0, s=[]
n=-10, s=[$Different]
n=-5, s=[Words]
n=0, s=[]
n=0, s=[]
n=0, s=[]
n=0, s=[]
n=-6, s=[expect]
n=49, s=[10,3,0,0,8,0,3,-6,0,-10,-5,0,0,0,0,-6,49,0,0,-255]
n=0, s=[]
n=0, s=[]
n=-255, s=[]

A diff of the correct output with your output shows:
                              No differences encountered -- CONGRATULATIONS

Three more points were possible here; your total is now 3/4

Test 8... does your program recognize metacharacters?
Here is the result of ~cssc0018/One/p1 < ~cs570/Data1/input2 :

Your output was:
n=5, s=[AB~CD]
n=5, s=[~ABCD]
n=-5, s=[SHELL]
n=-1, s=[~]
n=0, s=[]
n=-255, s=[]

The correct output is:
n=5, s=[AB~CD]
n=18, s=[/usr/local/binABCD]
n=-5, s=[SHELL]
n=-1, s=[~]
n=0, s=[]
n=-255, s=[]

A diff of the correct output with your output shows:
2c2
< n=18, s=[/usr/local/binABCD]
---
> n=5, s=[~ABCD]

                                              ERROR    ERROR    ERROR    ERROR
   (NOTE: Since I randomly set the HOME variable, you should not expect
   to see ~cssc0018 in the output.)
Three more points were possible here; your total is now 3/7

Test 9... how does your program react to backslash-metacharacters?
Here is the result of ~cssc0018/One/p1 < ~cs570/Data1/input3 :

Your output was:
n=13, s=[one\>stillone]
n=3, s=[\<<]
n=7, s=[\$abcd\]
n=0, s=[]
n=9, s=[<<\~foo\\]
n=0, s=[]
n=-255, s=[]

The correct output is:
n=12, s=[one>stillone]
n=1, s=[<]
n=1, s=[<]
n=5, s=[$abcd]
n=2, s=[<<]
n=5, s=[~foo\]
n=0, s=[]
n=-255, s=[]

A diff of the correct output with your output shows:
1,6c1,5
< n=12, s=[one>stillone]
< n=1, s=[<]
< n=1, s=[<]
< n=5, s=[$abcd]
< n=2, s=[<<]
< n=5, s=[~foo\]
---
> n=13, s=[one\>stillone]
> n=3, s=[\<<]
> n=7, s=[\$abcd\]
> n=0, s=[]
> n=9, s=[<<\~foo\\]

                                              ERROR    ERROR    ERROR    ERROR

Two more points were possible here; your total is now 3/9

Test 10... does your program handle buffer overruns correctly?
Here is the result of ~cssc0018/One/p1 < ~cs570/Data1/input4 :

Your output was:
n=6, s=[123$56]
n=1, s=[~]
n=-255, s=[]

The correct output is:
n=6, s=[123$56]
n=25, s=[/home/cs/carroll/cssc0018]
n=-255, s=[]

                                              ERROR    ERROR    ERROR    ERROR

Three more points were possible here; your total is now 4/12

Test 11... does your program handle buffer overruns correctly?
Here is the result of ~cssc0018/One/p1 < ~cs570/Data1/input5 :

Segmentation fault 
Your output was:

The correct output is:
n=5, s=[word1]
n=1, s=[|]
n=254, s=[123456789a123456789b123456789c123456789d123456789e123456789f123456789g123456789h123456789i123456789j123456789k123456789l123456789m123456789n123456789o123456789p123456789q123456789r123456789s123456789t123456789u123456789v123456789w123456789x123456789y1234]
n=254, s=[56789z123456789A123456789B123456789C123456789D123456789E123456789F123456789G123456789H123456789I123456789J123456789K123456789L123456789M123456789N123456789O123456789P123456789Q123456789R123456789S123456789T123456789U123456789V123456789W123456789X12345678]
n=12, s=[9Y123456789Z]
n=0, s=[]
n=-255, s=[]

A diff of the correct output with your output shows:
1,7d0
< n=5, s=[word1]
< n=1, s=[|]
< n=254, s=[123456789a123456789b123456789c123456789d123456789e123456789f123456789g123456789h123456789i123456789j123456789k123456789l123456789m123456789n123456789o123456789p123456789q123456789r123456789s123456789t123456789u123456789v123456789w123456789x123456789y1234]
< n=254, s=[56789z123456789A123456789B123456789C123456789D123456789E123456789F123456789G123456789H123456789I123456789J123456789K123456789L123456789M123456789N123456789O123456789P123456789Q123456789R123456789S123456789T123456789U123456789V123456789W123456789X12345678]
< n=12, s=[9Y123456789Z]
< n=0, s=[]
< n=-255, s=[]

                                              ERROR    ERROR    ERROR    ERROR

Three more points were possible here; your total is now 4/15

Your grade for this assignment may be adjusted by a (human) grader at the
due date.  Your grade could be as much as two points lower, depending on what
you have put in gradernotes, and the quality of your getword.c documentation.

             ------
Total Points | 4  |  for cssc0018 - Bernardo Cervantes,,,6196001753 for Program 1
             |----|
             | 15 |
             ------
