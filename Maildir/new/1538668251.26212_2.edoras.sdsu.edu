Return-Path: <cssc0018@edoras.sdsu.edu>
X-Original-To: cssc0018
Delivered-To: cssc0018@edoras.sdsu.edu
Received: by edoras.sdsu.edu (Postfix, from userid 1129)
	id 207186000048; Thu,  4 Oct 2018 08:50:51 -0700 (PDT)
Date: Thu, 04 Oct 2018 08:50:51 -0700
To: cssc0018@edoras.sdsu.edu
Subject: CS570 Program 2 results
User-Agent: Heirloom mailx 12.5 7/5/10
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
Message-Id: <20181004155051.207186000048@edoras.sdsu.edu>
From: cssc0018@edoras.sdsu.edu (Bernardo Cervantes)

This is a **preliminary** test of your upcoming Program 2.

This message, which will appear to be mailed from your account, is intended to
show you some (but not necessarily all) of the checks that will be made on your
assignment when the due date actually arrives.  This is NOT the actual version
that will be graded, but only an attempt to give you early warning of any
potential problems.  Point totals in the final graded version may differ.

[Standard Disclaimer:]
These practice tests are intended to show bugs, but also to reveal places
where you may not be following all the automatic grader's nitpicking
requirements.  If you receive failure warnings on the preliminary tests
and then also have difficulty during the graded event, you have very little
recourse.  To take full advantage of the feedback provided in this course,
you must do the assignments in a timely fashion.
jc

Login     Name                 Tty      Idle  Login Time   Office     Office Phone   Host
cssc0018  Bernardo Cervantes   pts/22      2  Oct  4 08:42 6196001753                (10.130.154.60)
cssc0018  Bernardo Cervantes   pts/23         Oct  4 08:43 6196001753                (10.130.154.60)

Checking Program 2:

Remember, the GradeEarly file will be used to decide if you are FINISHED.
If the GradeEarly file is present at the extra-credit deadline,
your program will be considered 'submitted', with NO further chance for
modifications.  Checking if the GradeEarly file exists:
ls -l ~cssc0018/Two/GradeEarly
/bin/ls: cannot access /home/cs/carroll/cssc0018/Two/GradeEarly: No such file or directory
This indicates you are NOT currently applying for extra credit.
Your solution would then be collected (for normal credit) the following week.
total 64
-rw------- 1 cssc0018    74 Sep  6 12:37 2ndfile
-rw------- 1 cssc0018 12288 Sep  6 12:47 9-6-18
drwx------ 5 cssc0018    52 Aug 30 23:26 Maildir/
drwx------ 2 cssc0018  4096 Oct  3 21:03 One/
-rw------- 1 cssc0018  1733 Aug 31 18:01 README
drwx------ 2 cssc0018  4096 Oct  4 08:48 Sandbox/
drwx------ 2 cssc0018  4096 Oct  4 08:48 Two/
drwxr-xr-x 2 cssc0018  4096 Sep 14 23:48 Zero/
-rw------- 1 cssc0018    50 Sep 23 16:27 bar
lrwxrwxrwx 1 cssc0018    31 Aug 30 10:16 calendar -> /home/cs/faculty/cs570/calendar
-rwxr-xr-x 1 cssc0018  9648 Aug 31 08:26 errors*
lrwxrwxrwx 1 cssc0018    31 Aug 31 08:05 errors.c -> /home/cs/faculty/cs570/errors.c
-rw------- 1 cssc0018     3 Sep  6 13:00 hifile
-rw------- 1 cssc0018    83 Sep  6 12:32 newfile
-rw------- 1 cssc0018    95 Sep  6 12:39 nf
-rw------- 1 cssc0018     0 Sep  6 12:40 sorted
Test 0... checking for the proper directory:
total 108
lrwxrwxrwx 1 cssc0018    28 Sep 25 19:36 Data2 -> /home/cs/faculty/cs570/Data2/
lrwxrwxrwx 1 cssc0018    39 Sep 18 09:15 getword.c -> /home/cs/carroll/cssc0018/One/getword.c
-rw-r--r-- 1 cssc0018  6982 Oct  3 17:41 getword.c~
lrwxrwxrwx 1 cssc0018    36 Oct  2 10:23 getword.h -> /home/cs/faculty/cs570/One/getword.h
-rw------- 1 cssc0018  6752 Oct  2 10:08 getword.h~
-rw------- 1 cssc0018  7776 Oct  3 21:03 getword.o
-rw------- 1 cssc0018   500 Sep 18 09:09 gradernotes
lrwxrwxrwx 1 cssc0018    35 Sep 18 08:58 makefile -> /home/cs/faculty/cs570/Two/makefile
-rwx------ 1 cssc0018 19808 Oct  4 08:45 p2*
-rw------- 1 cssc0018  6905 Oct  4 08:45 p2.c
-rw------- 1 cssc0018  6776 Oct  3 22:41 p2.c~
-rw------- 1 cssc0018  1682 Oct  3 22:43 p2.h
-rw------- 1 cssc0018  1647 Oct  3 22:42 p2.h~
-rw------- 1 cssc0018 14936 Oct  4 08:45 p2.o
-rw------- 1 cssc0018    10 Oct  3 21:04 test
-rw------- 1 cssc0018    10 Oct  3 21:04 test~
-rw------- 1 cssc0018   421 Oct  1 11:00 working.c
-r-------- 1 cssc0018   116 Oct  3 22:47 your.outputO
-r-------- 1 cssc0018   127 Oct  3 22:48 your.outputb
-r-------- 1 cssc0018     0 Oct  3 22:48 your.outputf
Test 1... testing will proceed only if you have created the proper files:
ls -lo ~/Two/p2.c ~/Two/getword.c
lrwxrwxrwx 1 cssc0018   39 Sep 18 09:15 /home/cs/carroll/cssc0018/Two/getword.c -> /home/cs/carroll/cssc0018/One/getword.c
-rw------- 1 cssc0018 6905 Oct  4 08:45 /home/cs/carroll/cssc0018/Two/p2.c




Test 2... Checking program structure with cflow:
cflow ~cssc0018/Two/p2.c ~cssc0018/Two/getword.c
main() <int main () at /home/cs/carroll/cssc0018/Two/p2.c:17>:
    setpgid()
    signal()
    sighandler() <void sighandler () at /home/cs/carroll/cssc0018/Two/p2.c:280>
    printf()
    parse() <int parse (char **commands, char *line) at /home/cs/carroll/cssc0018/Two/p2.c:63>:
        getword() <int getword (char *w) at /home/cs/carroll/cssc0018/Two/getword.c:36>:
            getenv()
            getchar()
            ungetc()
        strcmp()
    fflush()
    perror()
    exec_command() <void exec_command (char *command, char **args) at /home/cs/carroll/cssc0018/Two/p2.c:142>:
        fflush()
        fork()
        perror()
        run_child_command() <void run_child_command (char *command, char **args) at /home/cs/carroll/cssc0018/Two/p2.c:178>:
            set_up_redirection() <int set_up_redirection () at /home/cs/carroll/cssc0018/Two/p2.c:204>:
                file_exists()
                perror()
                open()
                exit()
                dup2()
                close()
            perror()
            exit()
            fflush()
            execvp()
        wait()
        printf()
    clear_flags() <void clear_flags () at /home/cs/carroll/cssc0018/Two/p2.c:266>:
    killpg()
    getpgrp()

Test 3... Checking for some prescribed/proscribed features;
a human will have to look over the output from the grep commands...
----------------------------------------------------------------------STORAGE
Are you defining a character buffer large enough to handle MANY 'long' words?
egrep -n '#define|STORAGE' p2.h p2.c
p2.h:12:#define EOF -255
p2.h:13:#define ZERO_COMMANDS 0
p2.h:14:#define FAIL 1
p2.h:15:#define SUCCESS 0
p2.h:16:#define STRING_EQUALS 0 
p2.h:17:#define TRUE 1
p2.h:18:#define FALSE 0
p2.h:20:#define PERMISSION_DENIED -21
p2.h:21:#define DIRECTORY_OPEN_ERROR -20
p2.h:22:#define INPUT_FILE_OPEN_ERROR -19
p2.h:23:#define INPUT_REDIRECTION_FAILED -18
p2.h:24:#define OUTPUT_REDIRECTION_FAILED -17
p2.h:25:#define OUTPUT_FILE_OPEN_ERROR -16
p2.h:26:#define REDIRECTION_FILE_EXISTS -15
p2.h:27:#define REDIRECTION_ERROR -14
p2.h:28:#define AMBIGUOUS_INPUT_REDIRECTION -13
p2.h:29:#define AMBIGOUS_OUT_REDIRECTION -12
p2.h:30:#define PARSE_ERROR -2
p2.h:32:#define MAXITEM 100 /* max number of words */
p2.h:33:#define MAXSIZE (STORAGE*MAXITEM) /*Max amount of characetr per commandline */
----------------------------------------------------------------------SIG
Are children being terminated with the correct signal?
egrep -n 'SIG|setp|signal|terminated' p2.c
19:	setpgid(0,0); // Sets current process and children to its own process group
20:	(void) signal(SIGTERM,sighandler); // Signal handler to catch SIGTERM
51:	killpg(getpgrp(),SIGTERM);
52:	printf("p2 terminated.\n");
----------------------------------------------------------------------wait
Is the parent waiting for a child?  ...For the CORRECT child?
egrep -n 'wait|while' p2.c
21:	while(TRUE){
130:	} while (word_size != EOF && word_size != ZERO_COMMANDS); // read until a line terminator is encountered
144:	int wait_status;
158:		/* if background flag is not set then the shell waits
163:				wait_status = wait(NULL);
165:			}while(wait_status != child_pid);
179:	int wait_status;
----------------------------------------------------------------------void
grep -n void p2.c
20:	(void) signal(SIGTERM,sighandler); // Signal handler to catch SIGTERM
142:void exec_command(char *command, char **args){
178:void run_child_command(char *command, char **args){
266:void clear_flags(){
280:void sighandler(){
----------------------------------------------------------------------null
Are you ensuring that background children don't compete for keyboard input?
grep -n /dev/null p2.c
----------------------------------------------------------------------fflush
Are you ensuring that children inherit only empty buffers?
egrep -n 'fork|fflush' p2.c
12: * 			- To handle execution we use system calls like dup2, execvp, fork, and pipe, etc.
30:			fflush(stdout);
35:			fflush(stdout);
37:			fflush(stderr);
145:	fflush(stdout);// Flushing before a fork to ensure stdout & stdout buffers are clear for the child.
146:	fflush(stderr);
148:	if((child_pid = fork()) == FAIL){
192:	fflush(stdout);
193:	fflush(stderr);
----------------------------------------------------------------------exit
Do all children exit() upon failure?
egrep -n 'execvp|exit|dup2|open|CHK|perror' p2.c
12: * 			- To handle execution we use system calls like dup2, execvp, fork, and pipe, etc.
18:	//int exit_code;
36:			perror("Parse error");
149:		perror("Forked failed");
187:			perror("Redirection error");
188:			exit(-2);
196:	if(execvp(command, args) == FAIL){
198:		perror("Exec failed");
199:		exit(1);
208:		 * read and write permissions as indicated b the flags passed to open
211:			perror("File exists");	
214:		file_descriptor = open(outfile, O_WRONLY | O_CREAT | O_TRUNC, S_IRUSR, S_IWUSR);
217:			perror("Cannot open overwrite file");
218:			exit(-3);
221:		/* Redirecting output from stdout to the open file*/
223:		if(dup2(file_descriptor, STDOUT_FILENO) < SUCCESS){
224:			perror("Output redirection with dup2 failed");
225:			exit(-4);
234:		file_descriptor = open(infile, O_RDONLY); //Only reading file
236:			perror("Cannot read input file");
237:			exit(-5);
239:		if(dup2(file_descriptor, STDIN_FILENO) < SUCCESS){
240:			perror("Input file redirection failed");
241:			exit(-6);
250:		file_descriptor = open("dev/null", O_RDONLY);
252:			perror("Input file cannot be opened with background flag");
253:			exit(-7);
255:		if(dup2(file_descriptor, STDIN_FILENO) < SUCCESS){
256:			perror("Input redirection failed with background flag");
257:			exit(-8);
NOTE: sometimes _exit() can be preferable to exit()
----------------------------------------------------------------------parse
What (if anything) are you passing to parse?
grep -n parse( p2.c
23:		new_argv_size = parse(new_argv, line);
63:int parse(char **commands , char *line){ 
----------------------------------------------------------------------system
Calls to system() are NOT being used, right?:
grep -n system p2.c
12: * 			- To handle execution we use system calls like dup2, execvp, fork, and pipe, etc.

Test 4... is p2.c documented?
(Your p2.c documentation does NOT have to repeat all the specs for p2,
but it should list your name, instructor name [NOTE: 'Carroll' contains
two 'R's and two 'L's], class [that is, 'CS570'], due date, etc.)
A brief synopsis and guidance at decision points / tricky issues will suffice.
You may LOSE a point here if keywords are missing; your total is now 0/0
(Many more points depend on your documentation, but a human will have to
assign the remaining documentation points.)

Test 5... how is the syntax?
make splint
splint -warnposix +trytorecover -weak getword.c p2.c
Splint 3.1.2 --- 11 Oct 2015

p2.c:121:24: Comment starts inside comment
  A comment open sequence (/*) appears within a comment.  This usually means an
  earlier comment was not closed. (Use -nestcomment to inhibit warning)
p2.c:122:19: Comment starts inside comment
p2.c: (in function main)
p2.c:42:4: Unrecognized identifier: exec_command
  Identifier used in code has not been declared. (Use -unrecog to inhibit
  warning)
p2.c:51:2: Unrecognized identifier: killpg
p2.c: (in function run_child_command)
p2.c:186:27: Unrecognized identifier: set_up_redirection
p2.c:186:6: Test expression for if is assignment expression:
               redirection_return = set_up_redirection() < -14
  The condition test is an assignment expression. Probably, you mean to use ==
  instead of =. If an assignment is intended, add an extra parentheses nesting
  (e.g., if ((a = b)) ...) to suppress this message. (Use -predassign to
  inhibit warning)
p2.c:179:6: Variable wait_status declared but not used
  A variable is declared but never used. Use /*@unused@*/ in front of
  declaration to suppress message. (Use -varuse to inhibit warning)
p2.c:180:8: Variable child_pid declared but not used

Finished checking --- 8 code warnings
make: *** [splint] Error 1

NOTE: not everything that 'splint' comments about is necessarily a bad thing;
for example, splint may complain if you don't save the value that printf()
returns (even if this may be a perfectly reasonable thing to ignore).

Test 6... Does the gradernotes file exist?
Yes.
Your gradernotes file contains:

1:"I wrote this code myself but I used the p2.c outline 
2: in the lecture notes to jump start my p2.c 
3: As errors occured I often googled syntax and used websites like
4: stackoverflow.com and various other that lead me to 
5: fix my code." I also emailed Dr. Caroll for help and hints on this program and 
6: he has given me very good help that has lead me to finish it. 
7:
8:As of right now my code is finished, has no known bugs and 
9:does produce the correct output which has been verified
10:by the autograder.

You may LOSE a point here if it doesn't exist; your total is now 0/0
(Note that TWO required statements belong in this file; also list your design
decisions here [see the 'checklist' below for samples of what to include .]
A human grader will check this later, and perhaps adjust your score.)

Test 7... are the makefile and getword.h soft links in place?
ls -l ~cssc0018/Two/makefile ~cssc0018/Two/getword.h
lrwxrwxrwx 1 cssc0018 carroll 36 Oct  2 10:23 /home/cs/carroll/cssc0018/Two/getword.h -> /home/cs/faculty/cs570/One/getword.h
lrwxrwxrwx 1 cssc0018 carroll 35 Sep 18 08:58 /home/cs/carroll/cssc0018/Two/makefile -> /home/cs/faculty/cs570/Two/makefile
makefile is correctly linked.
getword.h is correctly linked.
If you don't have the right setup, you could LOSE a point here;
                                       Your total is now 0/0

Test 8... are the proper .h files included in your source code?
One more point was possible here; your total is now 1/1
(If you are failing this test, just #include all the .h files for the system
calls recommended for program2, even if you are not yet using all those calls.)
There are (at least) 8 header files that you will need.
And of course, if you're using non-recommended calls, make sure you have the
proper .h files for those, too.

NOTE: Review the earlier splint output; if some function names are tagged as
"Unrecognized identifier", this is a pretty big hint about what you are missing.

Test 9... does your program compile?
make clean; make
rm -f *.o p2 your.output*
gcc -g   -c -o p2.o p2.c
In file included from p2.c:1:0:
p2.h:12:0: warning: "EOF" redefined [enabled by default]
 #define EOF -255
 ^
In file included from /usr/include/stdio.h:74:0,
                 from p2.h:1,
                 from p2.c:1:
/usr/include/libio.h:63:0: note: this is the location of the previous definition
 # define EOF (-1)
 ^
p2.c: In function 'parse':
p2.c:111:13: warning: assignment from incompatible pointer type [enabled by default]
     outfile = line;
             ^
p2.c:114:12: warning: assignment from incompatible pointer type [enabled by default]
     infile = line;
            ^
p2.c: At top level:
p2.c:142:6: warning: conflicting types for 'exec_command' [enabled by default]
 void exec_command(char *command, char **args){
      ^
p2.c:42:4: note: previous implicit declaration of 'exec_command' was here
    exec_command(new_argv[0], new_argv);
    ^
p2.c: In function 'set_up_redirection':
p2.c:210:3: warning: passing argument 1 of 'file_exists' from incompatible pointer type [enabled by default]
   if(file_exists(outfile) == SUCCESS){
   ^
In file included from p2.c:1:0:
p2.h:52:5: note: expected 'const char *' but argument is of type 'int *'
 int file_exists(const char *file_name){
     ^
p2.c:214:3: warning: passing argument 1 of 'open' from incompatible pointer type [enabled by default]
   file_descriptor = open(outfile, O_WRONLY | O_CREAT | O_TRUNC, S_IRUSR, S_IWUSR);
   ^
In file included from p2.h:3:0,
                 from p2.c:1:
/usr/include/fcntl.h:173:12: note: expected 'const char *' but argument is of type 'int *'
 extern int open (const char *__file, int __oflag, ...) __nonnull ((1));
            ^
p2.c:234:3: warning: passing argument 1 of 'open' from incompatible pointer type [enabled by default]
   file_descriptor = open(infile, O_RDONLY); //Only reading file
   ^
In file included from p2.h:3:0,
                 from p2.c:1:
/usr/include/fcntl.h:173:12: note: expected 'const char *' but argument is of type 'int *'
 extern int open (const char *__file, int __oflag, ...) __nonnull ((1));
            ^
gcc -g   -c -o getword.o getword.c
gcc p2.o getword.o -o p2
[1] 25947

Test 10... does your program ignore '&' as a command separator if it is in
the middle of the line, and handle '\;' correctly?
Here is the result of ~cssc0018/Two/p2 < ~cs570/Data2/input1 :

Your output was:
:570: Null & ; echo Void
:570: p2 terminated.

The correct output should be something like:
Null & ; echo Void
:570: :570: p2 terminated.

Your output might be ordered differently, and that's OK, as long as the
child output and the number of prompts (2 of them) is correct.

Parent/child output could get interleaved, but that's still correct behavior.

Three more points were possible here; your total is now 4/4

Some notes about the [odd-looking] correct output:
Your shell was run using: ~cssc0018/Two/p2 < ~cs570/Data2/input1
Due to the above redirection, we do not see any input commands, we only
see what your process outputs.  If you are following the specs, p2 should print
the prompt three times, followed by 'p2 terminated.', so
':570: :570: :570: p2 terminated.' is correct.
The child finishes first and therefore flushes his output buffer first, so the
child output will (usually) appear before the shell prompts in these tests.
...but this is NOT the order you should see when testing your p2 interactively.
NOTE: If your ':570: ' prompt prints the proper NUMBER of times, but is intermixed
with the other output, the autograder should still give you full credit; if not,
the most common reason is inexact punctuation (6 colons AND a period).

Test 11... does your program honor the 'cd' command?
Here is the result of ~cssc0018/Two/p2 < ~cs570/Data2/input2 :

/bin/ls: cannot access |: No such file or directory
/bin/ls: cannot access tr: No such file or directory
/bin/ls: cannot access a-z: No such file or directory
/bin/ls: cannot access A-Z: No such file or directory
Your output was:
:570: :570: .:
total 100
lrwxrwxrwx 1 cssc0018 carroll    28 Sep 25 19:36 Data2 -> 
/home/cs/faculty/cs570/Data2
lrwxrwxrwx 1 cssc0018 carroll    39 Sep 18 09:15 getword.c -> 
/home/cs/carroll/cssc0018/One/getword.c
-rw-r--r-- 1 cssc0018 carroll  6982 Oct  3 17:41 getword.c~
lrwxrwxrwx 1 cssc0018 carroll    36 Oct  2 10:23 getword.h -> 
/home/cs/faculty/cs570/One/getword.h
-rw------- 1 cssc0018 carroll  6752 Oct  2 10:08 getword.h~
-rw------- 1 cssc0018 carroll  7776 Oct  4 08:50 getword.o
-rw------- 1 cssc0018 carroll   500 Sep 18 09:09 gradernotes
lrwxrwxrwx 1 cssc0018 carroll    35 Sep 18 08:58 makefile -> 
/home/cs/faculty/cs570/Two/makefile
-rwx------ 1 cssc0018 carroll 19808 Oct  4 08:50 p2
-rw------- 1 cssc0018 carroll  6905 Oct  4 08:45 p2.c
-rw------- 1 cssc0018 carroll  6776 Oct  3 22:41 p2.c~
-rw------- 1 cssc0018 carroll  1682 Oct  3 22:43 p2.h
-rw------- 1 cssc0018 carroll  1647 Oct  3 22:42 p2.h~
-rw------- 1 cssc0018 carroll 14936 Oct  4 08:50 p2.o

                                              ERROR    ERROR    ERROR    ERROR
If 'cd' had worked, your program should have launched 'ls' from a new directory,
...and the pipe to 'tr' should have changed to upper-case letters.

Two more points were possible here; your total is now 4/6

Test 12... does 'cd' with no arguments work?
Here is the result of ~cssc0018/Two/p2 < ~cs570/Data2/input3 :

Your output was:
:570: :570: /etc
:570: p2 terminated.

The correct output is:
/usr/local/bin
:570: :570: :570: p2 terminated.
(You can get full credit, even with parent and child output interleaved.)

                                              ERROR    ERROR    ERROR    ERROR
(I randomly set the HOME variable, so don't expect ~cssc0018 in the output.)
If 'cd' had worked, 'pwd' should have reported whatever directory was currently
specified by the environment variable HOME.

Two more points were possible here; your total is now 4/8

Test 13... does backgrounding work?
Here is the result of ~cssc0018/Two/p2 < ~cs570/Data2/input4 :

Your output was:
:570: Thu Oct  4 08:50:39 PDT 2018
:570: /home/cs/faculty/cs570/jabbersleepy [25986]
:570: :570: Thu Oct  4 08:50:39 PDT 2018
:570: child =25986= begins sleep
child =25986= ends sleep
:570: p2 terminated.

Did you print the process name, a space, and '[' ? (i.e., '.../jabbersleepy [')
             /home/cs/faculty/cs570/jabbersleepy was printed -- CONGRATULATIONS

Did your shell print the correct child process ID, within '[' and ']' ?
                    Yes, the child PID inside [] was printed -- CONGRATULATIONS
Did the two 'date' commands get executed within the same second?
    Good, your shell did not wait for the background process -- CONGRATULATIONS

Three more points were possible here; your total is now 7/11

Test 14... do backgrounded zombies get reaped quickly?
Here is the result of ~cssc0018/Two/p2 < ~cs570/Data2/input88 :

Your output was:
:570: sleep [26014]
:570: :570: sleep [26015]
:570: :570: sleep [26016]
:570: :570: :570: foreground jobs should clear out all zombies...if you use 
wait() correctly.
:570: USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
cssc0018 22903  0.0  0.0 155144  2760 ?        S    08:42   0:00 sshd: 
cssc0018@pts/22
cssc0018 22904  0.0  0.0 119776  2224 pts/22   Ss   08:42   0:00 -tcsh
cssc0018 22935  0.0  0.0 155144  2916 ?        S    08:42   0:00 sshd: 
cssc0018@pts/23
cssc0018 22936  0.0  0.0 119764  2232 pts/23   Ss   08:42   0:00 -tcsh
cssc0018 23324  0.1  0.0  48124  5544 pts/22   S+   08:48   0:00 vim p2.c
cssc0018 23358  0.2  0.0  48104  5644 pts/23   S+   08:48   0:00 vim p2.c
cssc0018 25844  0.2  0.0  15684  1476 pts/5    S+   08:50   0:00 sg
cssc0018 25866  0.4  0.0  15680  1476 pts/5    S+   08:50   0:00 csh 
/tmp/carroll23506/studscript
cssc0018 25947  0.0  0.0  15680   580 pts/5    S    08:50   0:00 csh 
/tmp/carroll23506/studscript
cssc0018 25948  0.0  0.0   4360   348 pts/5    S    08:50   0:00 sleep 20

           No zombie '<defunct>' processes were found by ps  -- CONGRATULATIONS

You LOSE a point here if zombies remain (or ps fails); your total is now 7/11

Test 15... do backgrounded processes get killed when the shell exits?
NOTE: The following test does NOT work when I run it from a script
(such as my grading script) :-(
This is one of the tests I'll have to run 'by hand' after the due date.
YOU can check if you will pass the test by trying:

 ~cssc0018/Two/p2 < ~cs570/Data2/input5

If you have done things right, you should see jabbersleepy print 'begins sleep'
but it should get killed (by the exiting p2 shell) BEFORE it gets around to
announcing the 'ends sleep' message.
If this happens when you test this, then you're killing background processes OK.

When you do the input5 test 'by hand', pay attention to whether tcsh
reports 'Terminated' (with a capital 'T'); if so, this indicates you do
NOT have the signal-catching stuff working correctly yet.

Since this test has to be run 'by hand', all this script can check is
whether you MIGHT be using killpg() properly:
grep -n 'killpg(' ~/Two/p2.c
51:	killpg(getpgrp(),SIGTERM);
In file included from /home/cs/carroll/cssc0018/Two/p2.c:1:0:
/home/cs/carroll/cssc0018/Two/p2.h:12:0: warning: "EOF" redefined [enabled by default]
 #define EOF -255
 ^
In file included from /usr/include/stdio.h:74:0,
                 from /home/cs/carroll/cssc0018/Two/p2.h:1,
                 from /home/cs/carroll/cssc0018/Two/p2.c:1:
/usr/include/libio.h:63:0: note: this is the location of the previous definition
 # define EOF (-1)
 ^
 killpg(getpgrp(),15);
One more point was possible here; your total is now 8/12

Test 16... does the shell wait for foreground children?
Here is the result of ~cssc0018/Two/p2 < ~cs570/Data2/input6 :

Your output was:
:570: /bin/date [26034]
:570: :570: Thu Oct  4 08:50:45 PDT 2018
child =26035= begins sleep
child =26035= ends sleep
:570: Thu Oct  4 08:50:47 PDT 2018
:570: p2 terminated.

Did two seconds pass between the two 'date' commands?
          Good, your shell waited for the foreground process -- CONGRATULATIONS

One more point was possible here; your total is now 9/13

Test 17... does your program redirect standard output?
Here is the result of ~cssc0018/Two/p2 < ~cs570/Data2/input7 :

Your stdout contents (only ':570: :570: :570: p2 terminated.' should appear here) was:
:570: :570: :570: p2 terminated.
A diff of the correct prompts with yours shows:
Your shell should print an 'extra' :570: due to the blank line -- CONGRATULATIONS
Checking for the specified file (your.outputO)...
ls -l your.outputO
-r-------- 1 cssc0018 carroll 116 Oct  4 08:50 your.outputO
The data in the specified file (your.outputO) was:
Linux edoras.sdsu.edu 3.10.0-862.14.4.el7.x86_64 #1 SMP Wed Sep 26 15:12:11 UTC 
2018 x86_64 x86_64 x86_64 GNU/Linux

A diff of the correct output with the contents of your.outputO shows:

                     Child process redirected output to file -- CONGRATULATIONS

Three more points were possible here; your total is now 12/16

Test 18... do pipelines and input/output redirection all work?
Here is the result of ~cssc0018/Two/p2 < ~cs570/Data2/input11 :

cat: |: No such file or directory
cat: tr: No such file or directory
cat: a-z: No such file or directory
cat: A-Z: No such file or directory
The contents of stdout/stderr was:
:570: :570: p2 terminated.

The results of the redirected pipeline (in your.outputc) was:

The proper file contents should be:
ECHO NULL & \; ECHO VOID   

                                              ERROR    ERROR    ERROR    ERROR

Three more points were possible here; your total is now 12/19

Test 19... does your program guard against buffer overruns?
(Note that every one of the strings you put in your argv[] array could
potentially contain 254 characters, so p2 needs a LARGE character buffer...
Here is the result of ~cssc0018/Two/p2 < ~cs570/Data2/input8 :

What was sent to stdout was (with 'extra' newlines inserted at column 80,
so that the results don't display in a misleading way):
:570: abcde 123456789a123456789b123456789c123456789d123456789e123456789f12345678
9g123456789h123456789i123456789j123456789k123456789l123456789m123456789n12345678
9o123456789p123456789q123456789r123456789s123456789t123456789u123456789v12345678
9w123456789x123456789y1234 56789z123456789A123456789B123456789C123456789D1234567
89E123456789F123456789G123456789H123456789I123456789J123456789K123456789L1234567
89M123456789N123456789O123456789P123456789Q123456789R123456789S123456789T1234567
89U123456789V123456789W123456789X12345678 9Y123456789Z
:570: 7829+7919 | bc
:570: p2 terminated.

The first line of correct output (with extraneous newlines in column 80,
to wrap the lines and make them fit on the screen) are:
abcde 123456789a123456789b123456789c123456789d123456789e123456789f123456789g1234
56789h123456789i123456789j123456789k123456789l123456789m123456789n123456789o1234
56789p123456789q123456789r123456789s123456789t123456789u123456789v123456789w1234
56789x123456789y1234 56789z123456789A123456789B123456789C123456789D123456789E123
456789F123456789G123456789H123456789I123456789J123456789K123456789L123456789M123
456789N123456789O123456789P123456789Q123456789R123456789S123456789T123456789U123
456789V123456789W123456789X12345678 9Y123456789Z
Your shell did not seem to process the echo-bc pipeline correctly.
                                              ERROR    ERROR    ERROR    ERROR

    Your shell found the first truncation location correctly -- CONGRATULATIONS

Good, your shell found the second truncation point correctly -- CONGRATULATIONS

Three more points were possible here; your total is now 14/22

Test 20... does your program avoid overwriting existing files?
Here is the result of ~cssc0018/Two/p2 < ~cs570/Data2/input99 :

Your stdout contents were:
:570: :570: :570: :570: p2 terminated.
NOTE: examine your error messages below carefully; if you see repeated
messages that you did not expect, this is likely because the parent still had
the error message in its buffer, the forked child inherited this data, and then
both the parent and the child printed it.  You may have trouble reproducing
this effect in your own experiments, but fflush() is what you need to fix it.
**********************************************************************
*             STDERR MESSAGES FROM input99                           *
**********************************************************************
Your stderr contents were:
File exists: Success
Cannot open overwrite file: Permission denied
   If you complained about not overwriting existing files, then CONGRATULATIONS
may be appropriate.
Checking for the specified file (your.outputO)...
ls -l your.outputO
-r-------- 1 cssc0018 carroll 116 Oct  4 08:50 your.outputO
The data in the specified file (your.outputO) was:
Linux edoras.sdsu.edu 3.10.0-862.14.4.el7.x86_64 #1 SMP Wed Sep 26 15:12:11 UTC 
2018 x86_64 x86_64 x86_64 GNU/Linux

The output of the uname command should be in this file (not the echo output)
     Child process redirected output, but did not overwrite -- CONGRATULATIONS

Two more points were possible here; your total is now 16/24

Test 21... do foreground/background input/output redirection all work?
NOTE: in this test, your HOME directory was set to /home/cs/faculty/cs570
Here is the result of ~cssc0018/Two/p2 < ~cs570/Data2/input9 :

The contents of stdout/stderr was:
:570: tr [26116]
:570: :570: :570: /home/cs/faculty/cs570 :570: p2 terminated.

The results of the foreground command (in your.outputf) was:
NO-BRAINER ONE ; 
  TRICKIER;T$O  $MASTER
  $$DIFFERENT $WORDS $
$; $EXPECT 10,3,0,0,8,0,3,-6,0,-10,-5,0,0,0,0,-6,49,0,0,-255
$
The proper file contents should be:
NO-BRAINER ONE ; 
  TRICKIER;T$O  $MASTER
  $$DIFFERENT $WORDS $
$; $EXPECT 10,3,0,0,8,0,3,-6,0,-10,-5,0,0,0,0,-6,49,0,0,-255
$
         Child process redirected input/output from/to files -- CONGRATULATIONS

The results of the background command (in your.outputb) was:
NO-BRAINER ONE ; 
  TRICKIER;T$O  $MASTER
  $$DIFFERENT $WORDS $
$; $EXPECT 10,3,0,0,8,0,3,-6,0,-10,-5,0,0,0,0,-6,49,0,0,-255
$
The proper file contents should be:
NO-BRAINER ONE ; 
  TRICKIER;T$O  $MASTER
  $$DIFFERENT $WORDS $
$; $EXPECT 10,3,0,0,8,0,3,-6,0,-10,-5,0,0,0,0,-6,49,0,0,-255
$
         Child process redirected input/output from/to files -- CONGRATULATIONS

Three more points were possible here; your total is now 19/27

Test 22... Does tilde and dollar-sign get treated correctly?
Here is the result of ~cssc0018/Two/p2 < ~cs570/Data2/input12 :

The contents of stdout was:
:570: AB~CD /usr/local/binABCD
:570: still part of previous line $SHELL &
:570: :570: p2 terminated.
:570: p2 terminated.

Your prompts might be interleaved differently, but stdout should look like:
AB~CD /usr/local/binABCD SHELL ~ echo still part of previous line $SHELL &
:570: :570: :570: p2 terminated.
                                              ERROR    ERROR    ERROR    ERROR
You don't appear to be handling the backslash-newline combination correctly.

**********************************************************************
*             STDERR MESSAGES FROM input12                           *
**********************************************************************
What was sent to stderr was:

Nothing was sent to stderr; a complaint about '&' not being an executable
binary should be sent to stderr, so that's an ERROR    ERROR    ERROR    ERROR
(Don't expect ~cssc0018 in the output, since I randomly set the HOME variable.)

Two more points were possible here; your total is now 19/29

Test 23... does your program handle badly-constructed commands?
Here is the result of ~cssc0018/Two/p2 < ~cs570/Data2/input10 :

What was sent to stdout was:
:570: :570: :570: CentOS Linux release 7.5.1804 (Core) 
:570: :570: Linux
:570: SHOULD_not_EXEC |
:570: sort [26154]
:570: :570: This echo and the next cd SHOULD be executed by your shell and NOT 
cause errors
:570: cd [26156]
:570: :570: 
#!/bin/csh
## word frequency program
sort | uniq -c | sort -nr
tr A-Z a-z | tr -sc a-z '\012' |\
/etc/X11
:570: p2 terminated.
:570: CentOS Linux release 7.5.1804 (Core) 
:570: :570: Linux
:570: SHOULD_not_EXEC |
:570: sort [26161]
:570: :570: This echo and the next cd SHOULD be executed by your shell and NOT 
cause errors

    Good, your shell continued to process the valid commands -- CONGRATULATIONS

**********************************************************************
*             STDERR MESSAGES FROM input10                           *
**********************************************************************
What was sent to stderr was:
Input file cannot be opened with background flag: No such file or directory
Input file cannot be opened with background flag: No such file or directory

If your stderr message complained about confusing options, then CONGRATULATIONS
may be appropriate.

Of course, a human will have to judge the quality of your error/warning messages

Three more points were possible here; your total is now 22/32
The assignment will be worth 35 points (after a human grades it).

Test 24... no points, just a way of checking if vertical piping is implemented.
If you have pipelines working, the results of a ps command should be displayed.
Examine the output of the ps command below carefully.  If you are doing vertical
piping correctly, the parent of the 'sleep' process (shown in the PPID coumn)
should be the 'vertical' process, NOT the parent 'p2' process.
If p2, vertical, and sleep report 3 different numbers in the PPID column,
relax -- you're doing things right.

But if both children report p2 as their parent, this is horizontal piping.
The autograder is too dumb to check this effectively, so it may be reporting a
MUCH higher score than is warranted.

If you fail to do vertical piping, it [negatively] affects your grade.  A human
(me) will have to sadly demolish your piping points when I grade the printouts.

One of the 3 processes reported should be the child doing the 'sleep' command.
If you see only two processes in the ps output, perhaps you are [inadvisably]
having one child wait until the grandchild finishes.  Don't do that...

Here is the result of ~cssc0018/Two/p2 < ~cs570/Data2/input16 :

sleep: invalid time interval '|'
sleep: invalid time interval '/home/cs/faculty/cs570/vertical'
Try 'sleep --help' for more information.
:570: :570: :570: p2 terminated.
NOTE: if you are not seeing any output, this [may] mean that you are INCORRECTLY
having the child wait() for the grandchild.  You should NOT do this --
Only the original parent should be doing any wait()ing.

Your grade for this assignment will be determined by a (human) grader
at the due date.
The automation currently only tests 32 out of the total 35 points;
a human will determine whether you have earned the remaining 3 points,
and if you miss too much stuff on the checklist below, you'll LOSE some points.
(On the automated part, you scored 22/32.)
See the extensive checklist to get an idea of what I will be looking for.
             ------
Total Points |22+?|  for cssc0018 cssc0018 - Bernardo Cervantes,,,61960017 for Program 2
             |----|
             | 35 |
             ------
The file /home/cs/carroll/cssc0018/Two/GradeEarly does not exist;
IF this had been the extra-credit deadline,
your project would have been collected later, for no extra credit.
Program 2 gradesheet

a PARTIAL checklist of things the grader may judge:

Quality of documentation & header info          constants, etc. documented?
                                        ___/    name, class, instructor, date?
getword.c documentation?                        algorithm explained?
                                        ___/
Appropriate bad-syntax error messages           (to stderr, of course)
                                        ___/
NO inappropriate duplicate output lines
(neither stderr nor stdout)             ___/    Research fflush()
Correct foreground child wait()ed for?
                                        ___/    2 statements, and also:
MULTIPLE required items in gradernotes?         E.g., what do you do if you see:
                                        ___/    echo hi>& ?   Document your
Documentation of individual choices             choices *in gradernotes*, so
                                        ___/    that I can find it!
Background processes dup2 on /dev/null?
                                        ___/    Are background zombies reaped
Background processes terminate correctly        as soon as possible?
                                        ___/
Do you exit upon execvp failure?                Same for pipe, dup2, open, etc.?
                                        ___/
NO ONE should wait() for grandchild!            ...this can cause deadlock!
                                        ___/
Does a child create grandchild in pipes?        IMPORTANT!!! You will LOSE *ALL*
                                        ___/    the pipeline points if you did
Is your character array long enough?            not use 'vertical' pipelining.
                                        ___/
"p2 terminated" printf comes AFTER killpg       (This is how I check if your
                                        ___/    signal handler is working...)
Unexpected behavior (if any) documented
in gradernotes file                     ___/    SAY what isn't working!
                                       ______
                                      |      |
                                      |______|
                                      |  35  |
                                      |______|
